19 . Use Encapsulation to Protect Data
class Student:
    def __init__(self, marks):
        self.__marks = marks  # private attribute

    # Getter method to access private marks
    def get_marks(self):
        return self.__marks

    # Setter method to modify private marks
    def set_marks(self, marks):
        if marks >= 0 and marks <= 100:
            self.__marks = marks
        else:
            print("Invalid marks. Please enter a value between 0 and 100.")

# Example usage
s1 = Student(85)
print("Initial Marks:", s1.get_marks())

s1.set_marks(95)
print("Updated Marks:", s1.get_marks())

s1.set_marks(150)  # Invalid input
